// <auto-generated />
using System;
using EmployeeManagement.Models.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EmployeeManagement.Migrations
{
    [DbContext(typeof(EmployeeManagementContext))]
    partial class EmployeeManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EmployeeManagement.Models.Entities.AnnualLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId");

                    b.Property<int>("NumberOfDaysLeave");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AnnualLeave");
                });

            modelBuilder.Entity("EmployeeManagement.Models.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_Department");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDelete = false,
                            Name = "Kinh doanh"
                        },
                        new
                        {
                            Id = 2,
                            IsDelete = false,
                            Name = "Nhân sự"
                        },
                        new
                        {
                            Id = 3,
                            IsDelete = false,
                            Name = "Lập trình"
                        });
                });

            modelBuilder.Entity("EmployeeManagement.Models.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<int>("DepartmentId");

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("date");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("IdNumber")
                        .HasMaxLength(50);

                    b.Property<string>("Image");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50);

                    b.Property<int>("PositionId");

                    b.Property<bool>("Sex");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("IX_Employee");

                    b.HasIndex("PositionId");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Huế",
                            CreateDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            Dob = new DateTime(1995, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EditDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lnpttor@gmail.com",
                            FullName = "Lê Nguyễn Phước Thành",
                            IdNumber = "2514254253",
                            IsDelete = false,
                            PhoneNumber = "0325123657",
                            PositionId = 3,
                            Sex = true,
                            TaxId = "231251254"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Huế",
                            CreateDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            Dob = new DateTime(2000, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EditDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tu@gmail.com",
                            FullName = "Tú",
                            IdNumber = "2021252125",
                            IsDelete = false,
                            PhoneNumber = "0325122422",
                            PositionId = 2,
                            Sex = true,
                            TaxId = "325125425"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Huế",
                            CreateDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            Dob = new DateTime(2000, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EditDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tri@gmail.com",
                            FullName = "Trí",
                            IdNumber = "2521425125",
                            IsDelete = false,
                            PhoneNumber = "0785425425",
                            PositionId = 1,
                            Sex = true,
                            TaxId = "021323652"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Huế",
                            CreateDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            Dob = new DateTime(2000, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EditDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nhan@gmail.com",
                            FullName = "Nhân",
                            IdNumber = "2122225254",
                            IsDelete = false,
                            PhoneNumber = "0765854752",
                            PositionId = 1,
                            Sex = true,
                            TaxId = "232114225"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Huế",
                            CreateDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            Dob = new DateTime(1990, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EditDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bao@gmail.com",
                            FullName = "Báo",
                            IdNumber = "2121252142",
                            IsDelete = false,
                            PhoneNumber = "0325124256",
                            PositionId = 1,
                            Sex = true,
                            TaxId = "322521242"
                        });
                });

            modelBuilder.Entity("EmployeeManagement.Models.Entities.LeaveApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("date");

                    b.Property<int?>("DaysLeaveRemaining");

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Feedback")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("FeedbackDate")
                        .HasColumnType("date");

                    b.Property<int>("LeaveCode");

                    b.Property<int>("ManagerId");

                    b.Property<int?>("NumberOfAbsent");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ManagerId");

                    b.ToTable("LeaveApplication");
                });

            modelBuilder.Entity("EmployeeManagement.Models.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_Position");

                    b.ToTable("Position");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDelete = false,
                            Name = "Nhân viên"
                        },
                        new
                        {
                            Id = 2,
                            IsDelete = false,
                            Name = "Phó phòng"
                        },
                        new
                        {
                            Id = 3,
                            IsDelete = false,
                            Name = "Trưởng phòng"
                        });
                });

            modelBuilder.Entity("EmployeeManagement.Models.Entities.Statistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DaysLeaveRemaining");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("Late");

                    b.Property<int>("Month");

                    b.Property<decimal>("PaidLeave")
                        .HasColumnType("decimal(4, 1)");

                    b.Property<int>("Punctual");

                    b.Property<decimal>("Unauthorized")
                        .HasColumnType("decimal(4, 1)");

                    b.Property<decimal>("UnpaidLeave")
                        .HasColumnType("decimal(4, 1)");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("EmployeeManagement.Models.Entities.TimeSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EmployeeId");

                    b.Property<TimeSpan?>("In1");

                    b.Property<TimeSpan?>("In2");

                    b.Property<int>("ManagerId");

                    b.Property<TimeSpan?>("Out1");

                    b.Property<TimeSpan?>("Out2");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ManagerId");

                    b.ToTable("TimeSheet");
                });

            modelBuilder.Entity("EmployeeManagement.Models.Entities.TimeSheetsLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<int>("EmployeeId");

                    b.Property<TimeSpan?>("In1");

                    b.Property<TimeSpan?>("In2");

                    b.Property<int>("ManagerId");

                    b.Property<TimeSpan?>("Out1");

                    b.Property<TimeSpan?>("Out2");

                    b.Property<int>("Status");

                    b.Property<int>("TimeSheetsId");

                    b.HasKey("Id");

                    b.HasIndex("TimeSheetsId");

                    b.ToTable("TimeSheetsLog");
                });

            modelBuilder.Entity("EmployeeManagement.Models.Entities.AnnualLeave", b =>
                {
                    b.HasOne("EmployeeManagement.Models.Entities.Employee", "Employee")
                        .WithMany("AnnualLeave")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_AnnualLeave_Employee");
                });

            modelBuilder.Entity("EmployeeManagement.Models.Entities.Employee", b =>
                {
                    b.HasOne("EmployeeManagement.Models.Entities.Department", "Department")
                        .WithMany("Employee")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Employee_Department");

                    b.HasOne("EmployeeManagement.Models.Entities.Position", "Position")
                        .WithMany("Employee")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_Employee_Position");
                });

            modelBuilder.Entity("EmployeeManagement.Models.Entities.LeaveApplication", b =>
                {
                    b.HasOne("EmployeeManagement.Models.Entities.Employee", "Employee")
                        .WithMany("LeaveApplicationEmployee")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_LeaveApplication_Employee");

                    b.HasOne("EmployeeManagement.Models.Entities.Employee", "Manager")
                        .WithMany("LeaveApplicationManager")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_LeaveApplication_Employee1");
                });

            modelBuilder.Entity("EmployeeManagement.Models.Entities.Statistics", b =>
                {
                    b.HasOne("EmployeeManagement.Models.Entities.Employee", "Employee")
                        .WithMany("Statistics")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Statistics_Employee");
                });

            modelBuilder.Entity("EmployeeManagement.Models.Entities.TimeSheet", b =>
                {
                    b.HasOne("EmployeeManagement.Models.Entities.Employee", "Employee")
                        .WithMany("TimeSheetEmployee")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_TimeSheet_Employee");

                    b.HasOne("EmployeeManagement.Models.Entities.Employee", "Manager")
                        .WithMany("TimeSheetManager")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_TimeSheet_Employee1");
                });

            modelBuilder.Entity("EmployeeManagement.Models.Entities.TimeSheetsLog", b =>
                {
                    b.HasOne("EmployeeManagement.Models.Entities.TimeSheet", "TimeSheets")
                        .WithMany("TimeSheetsLog")
                        .HasForeignKey("TimeSheetsId")
                        .HasConstraintName("FK_TimeSheetsLog_TimeSheet");
                });
#pragma warning restore 612, 618
        }
    }
}
